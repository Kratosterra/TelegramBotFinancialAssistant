import datetime
import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from bot import dp
from handlers.keyboards import inline_keybords
from handlers.models.income_spend_model import IncomeSpendForm
from handlers.models.report_model import ReportForm
from helpers import report


@dp.callback_query_handler(text_contains='report:small', state=[ReportForm.start])
async def small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ —Å—Ç–∞—Ä—Ç—É.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        await call.message.delete()
        logging.debug(f'–ü–æ–ª—É—á–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        await ReportForm.small_report.set()
        now = datetime.date.today()
        await call.message.answer(
            f"üìÑ *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç*\n{await report.get_small_text_report(str(call.from_user.id), datetime.date.today())}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now))
    except Exception as e:
        logging.error(f"{small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='more:', state=ReportForm.small_report)
async def expand_small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–î–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        date = call.data.split(':')
        now = datetime.datetime.strptime(date[1], "%Y-%m-%d")
        await call.message.edit_text(
            f"üìÑ *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç*\n{await report.get_small_text_report(str(call.from_user.id), now, True)}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now, False))
        await call.answer()
    except Exception as e:
        logging.error(f"{expand_small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='less:', state=ReportForm.small_report)
async def expand_small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–î–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç –º–µ–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        date = call.data.split(':')
        now = datetime.datetime.strptime(date[1], "%Y-%m-%d")
        await call.message.edit_text(
            f"üìÑ *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç*\n{await report.get_small_text_report(str(call.from_user.id), now)}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now))
        await call.answer()
    except Exception as e:
        logging.error(f"{expand_small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='change:', state=ReportForm.small_report)
async def change_small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–ú–µ–Ω—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç –º–µ–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        date = call.data.split(':')
        now = datetime.datetime.strptime(date[1], "%Y-%m-%d")
        await call.message.edit_text(
            f"üìÑ *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç*\n{await report.get_small_text_report(str(call.from_user.id), now)}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now))
        await call.answer()
    except Exception as e:
        logging.error(f"{change_small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)
