import datetime
import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from bot import dp
from handlers.keyboards import inline_keybords
from handlers.models.income_spend_model import IncomeSpendForm
from handlers.models.report_model import ReportForm
from helpers import report, full_report


@dp.callback_query_handler(text_contains='report:small', state=[ReportForm.start])
async def small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ —Å—Ç–∞—Ä—Ç—É.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        await call.message.delete()
        logging.debug(f'–ü–æ–ª—É—á–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        await ReportForm.small_report.set()
        now = datetime.date.today()
        await call.message.answer(
            f"üìÑ *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç*\n{await report.get_small_text_report(str(call.from_user.id), datetime.date.today())}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now))
    except Exception as e:
        logging.error(f"{small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='more:', state=ReportForm.small_report)
async def expand_small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–î–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        date = call.data.split(':')
        now = datetime.datetime.strptime(date[1], "%Y-%m-%d")
        await call.message.edit_text(
            f"üìÑ *–û—Ç—á—ë—Ç*\n{await report.get_small_text_report(str(call.from_user.id), now, True)}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now, False))
        await call.answer()
    except Exception as e:
        logging.error(f"{expand_small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='less:', state=ReportForm.small_report)
async def expand_small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–î–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç –º–µ–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        date = call.data.split(':')
        now = datetime.datetime.strptime(date[1], "%Y-%m-%d")
        await call.message.edit_text(
            f"üìÑ *–û—Ç—á—ë—Ç*\n{await report.get_small_text_report(str(call.from_user.id), now)}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now))
        await call.answer()
    except Exception as e:
        logging.error(f"{expand_small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='change:', state=ReportForm.small_report)
async def change_small_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–ú–µ–Ω—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—á–µ—Ç –º–µ–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        date = call.data.split(':')
        now = datetime.datetime.strptime(date[1], "%Y-%m-%d")
        await call.message.edit_text(
            f"üìÑ *–û—Ç—á—ë—Ç*\n{await report.get_small_text_report(str(call.from_user.id), now)}",
            parse_mode="MarkdownV2",
            reply_markup=await inline_keybords.create_report_keyboard_small(now))
        await call.answer()
    except Exception as e:
        logging.error(f"{change_small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(text_contains='report:full', state=[ReportForm.start])
async def big_report_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ —Å—Ç–∞—Ä—Ç—É.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        await call.message.delete()
        logging.debug(f'–ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–æ–π –æ—Ç—á–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        await ReportForm.big_report.set()
        await call.message.answer(
            f"üìä *–û—Ç—á–µ—Ç Excel*\n\n_–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ_",
            parse_mode="MarkdownV2",
            reply_markup=inline_keybords.big_report_inline)
    except Exception as e:
        logging.error(f"{small_report_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(IncomeSpendForm.value)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('date:'), state=[ReportForm.report_start,
                                                                                   ReportForm.report_end])
async def date_message_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        year, month, day = map(int, call.data.split(':')[1:])
        data = datetime.datetime(year, month, day)
        if await state.get_state() == ReportForm.report_end.state:
            await state.update_data(report_end=data)
            await call.answer(f"–ö–æ–Ω–µ—Ü: {data.strftime('%Y-%m-%d')}")
        else:
            await state.update_data(report_start=data)
            await call.answer(f"–ù–∞—á–∞–ª–æ: {data.strftime('%Y-%m-%d')}")
        await call.message.delete()
        await ReportForm.big_report.set()
    except Exception as e:
        logging.error(f"{date_message_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await call.message.delete()
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç —Å–Ω–æ–≤–∞!")
        await IncomeSpendForm.value.set()


@dp.callback_query_handler(text_contains='change_date:', state=ReportForm.big_report)
async def send_date_picker(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Å—É–º–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º.
    :param call: –í—ã–∑–æ–≤ –æ—Ç –∫–Ω–æ–ø–∫–∏.
    """
    try:
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        year = datetime.datetime.today().year
        month = datetime.datetime.today().month
        calendar_keyboard = await inline_keybords.generate_calendar(year, month)
        type_of_date = call.data.split(':')
        if type_of_date[1] == 'start':
            await ReportForm.report_start.set()
        else:
            await ReportForm.report_end.set()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard, disable_notification=True)
        await call.answer()
    except Exception as e:
        logging.error(f"{send_date_picker.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await IncomeSpendForm.value.set()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('previous_month'), state=[ReportForm.report_start,
                                                                                            ReportForm.report_end])
async def process_previous_month_callback(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –ø–µ—Ä–µ–Ω–æ—Å—è—â—É—é –Ω–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü, –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
    """
    try:
        logging.debug(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        year, month = map(int, call.data.split(':')[1:])
        new_month = month - 1
        new_year = year
        if new_month < 1:
            new_month = 12
            new_year = year - 1
        keyboard = await inline_keybords.generate_calendar(new_year, new_month)
        await dp.bot.edit_message_reply_markup(call.message.chat.id,
                                               call.message.message_id,
                                               reply_markup=keyboard)

        await dp.bot.answer_callback_query(call.id)
        await call.answer()
    except Exception as e:
        logging.error(f"{process_previous_month_callback.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await ReportForm.big_report.set()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('next_month'), state=[ReportForm.report_start,
                                                                                        ReportForm.report_end])
async def process_next_month_callback(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –ø–µ—Ä–µ–Ω–æ—Å—è—â—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü, –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
    """
    try:
        logging.debug(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        year, month = map(int, call.data.split(':')[1:])
        new_month = month + 1
        new_year = year
        if new_month > 12:
            new_month = 1
            new_year = year + 1
        keyboard = await inline_keybords.generate_calendar(new_year, new_month)
        await dp.bot.edit_message_reply_markup(call.message.chat.id,
                                               call.message.message_id,
                                               reply_markup=keyboard)
        await dp.bot.answer_callback_query(call.id)
        await call.answer()
    except Exception as e:
        logging.error(f"{process_next_month_callback.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await ReportForm.big_report.set()


@dp.callback_query_handler(text_contains='calendar:delete', state=[ReportForm.report_start,
                                                                   ReportForm.report_end])
async def cancel_calendar_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞—è –≤ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    :param call: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f'–û—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.')
        await call.answer()
        await call.message.delete()
        data = await state.get_data()
        await state.set_state(ReportForm.big_report)
        await state.set_data(data)
    except Exception as e:
        logging.error(f"{cancel_calendar_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await state.set_state(ReportForm.big_report)


@dp.callback_query_handler(text_contains='proceed', state=ReportForm.big_report)
async def proceed_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã –∫–∞–∫ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –¥–æ—Ö–æ–¥–∞. –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    :param call: –í—ã–∑–æ–≤ –æ—Ç –∫–Ω–æ–ø–∫–∏.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    try:
        logging.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        data = (await state.get_data())
        if 'report_end' not in data.keys() or 'report_start' not in data.keys():
            await call.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—ã!")
            return

        if data["report_end"] <= data["report_start"]:
            await call.answer("–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ!")
            return
        start = data['report_start'].strftime('%Y-%m-%d').replace('-', '\-')
        end = data['report_end'].strftime('%Y-%m-%d').replace('-', '\-')
        path_to_file = await full_report.get_report_table(str(call.from_user.id), data['report_start'],
                                                          data['report_end'])
        await call.message.answer_document(open(path_to_file, 'rb'),
                                           caption=f"üìä *–û—Ç—á—ë—Ç Excel*\nC _{start}_ –ø–æ _{end}_",
                                           parse_mode="MarkdownV2")
        await call.message.delete()
        await state.finish()
        await IncomeSpendForm.value.set()
        # TODO: –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏)
    except Exception as e:
        logging.error(f"{proceed_handler.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {call.from_user.id}.")
        await call.answer("–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await IncomeSpendForm.value.set()
