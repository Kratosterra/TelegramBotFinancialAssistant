import logging

from aiogram import types
from aiogram.dispatcher.filters import Text

from bot import dp
from database import db_functions
from handlers.keyboards import keyboard
from texts.ru_RU import messages


@dp.message_handler(commands=['start'])
async def start(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª–Ω—è—é—â–∞—è—Å—è –ø—Ä–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        logging.debug(f"/start. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")
        await db_functions.initialize_user(str(message.from_user.id))
        await message.answer(messages.start_message, parse_mode="MarkdownV2", reply_markup=keyboard.main_menu)
    except Exception as e:
        logging.error(f"{start.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(Text(equals='üìù –û—Ç—á—ë—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç'))
async def on_report(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.answer("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –û—Ç—á—ë—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç")
        await message.delete()
    except Exception as e:
        logging.error(f"{on_report.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(Text(equals='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
async def on_info(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –±—é–¥–∂–µ—Ç–∞
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.delete()
        await message.answer("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    except Exception as e:
        logging.error(f"{on_info.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(Text(equals='üìà –¢—Ä–∞—Ç—ã –∏ –î–æ—Ö–æ–¥—ã'))
async def on_incomes_spends(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Ç—Ä–∞—Ç–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–∞–º–∏
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.delete()
        await message.answer("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¢—Ä–∞—Ç—ã –∏ –î–æ—Ö–æ–¥—ã")
    except Exception as e:
        logging.error(f"{on_incomes_spends.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(Text(equals='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
async def on_settings(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.delete()
        await message.answer("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    except Exception as e:
        logging.error(f"{on_settings.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(Text(equals='üÜò –ü–æ–º–æ—â—å'))
async def on_help(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.delete()
        await message.answer(messages.help_message, parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"{on_help.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(content_types=['document', 'photo'])
async def on_files(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∑–∞–ø—É—Å–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–æ—Ç–æ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        if message.document:
            logging.debug(f"–ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç {message.document.file_name}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")
            await message.answer("–ò–º–ø–æ—Ä—Ç")
        if message.photo:
            logging.debug(f"–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")
            await message.answer("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR")
    except Exception as e:
        logging.error(f"{on_files.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")


@dp.message_handler(content_types=["audio", "sticker", "video", "video_note", "voice", "location", "contact"])
async def on_all_not_command_message(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param message: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    logging.debug(f"–ü–æ–ª—É—á–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id}.")
    await message.answer(text=messages.not_in_bot_message, parse_mode="MarkdownV2")


def register_client():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
    """
    dp.register_message_handler(start, commands=['start'])
