import datetime
import logging
from calendar import monthrange

from database import db_functions
from texts.ru_RU import messages


def _get_dates_of_period(start: datetime, end: datetime, this_moths: bool = False) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –ª–∏–±–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    :param start: –ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    :param end: –ö–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    :param this_moths: –í —ç—Ç–æ–º –ª–∏ –º–µ—Å—è—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞—Ç—ã.
    :return: –õ–∏—Å—Ç –¥–∞—Ç.
    """
    dates = []
    if this_moths:
        end = datetime.datetime.now()
        start = datetime.datetime(end.date().year, end.date().month, 1)
        delta = end - start
        for day_i in range(delta.days + 1):
            days = start + datetime.timedelta(days=day_i)
            dates.append(days)
    else:
        delta = end - start
        for day_i in range(delta.days + 1):
            days = start + datetime.timedelta(days=day_i)
            dates.append(days)
    return dates


async def _get_day_string() -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –≤–∏–¥–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞.
    :return: –°—Ç—Ä–æ–∫—É –¥–ª—è –±—é–¥–∂–µ—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –≤–∏–¥–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞.
    """
    year = datetime.datetime.now().year
    month = messages.months[int(datetime.datetime.now().month)]
    return f"\n_–ó–∞ *{month} {year}*_"


async def _get_event_spend_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—é–¥–∂–µ—Ç–æ–º.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        event_spend = await db_functions.return_all_events_spends(user_id)
        data = "*–°–æ–±—ã—Ç–∏—è*\n\n‚úÖ \- —É—á—Ç–µ–Ω–æ\n‚≠ï \- –æ–∂–∏–¥–∞–µ—Ç —É—á—ë—Ç–∞\n\n*–°–æ–±—ã—Ç–∏—è —Ç—Ä–∞—Ç*\n\n"
        month = messages.months_events[int(datetime.datetime.now().month)]
        if len(event_spend) == 0:
            data += "*–ü–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\.*\n\n"
            return data
        for spend_name in event_spend:
            sum_spend = str(event_spend[spend_name]['value_of_spending']).replace('.', '\.')
            day = event_spend[spend_name]["day_of_spending"]
            today = event_spend[spend_name]["last_indexed"]
            check = today
            if today is not None:
                today = datetime.datetime.strptime(today, "%Y-%m-%d").day
                if datetime.datetime.strptime(check, "%Y-%m-%d").month < datetime.date.today().month\
                        or datetime.datetime.strptime(check, "%Y-%m-%d").year < datetime.date.today().year:
                    today = None
            if today is not None and day <= today:
                data += f"*{spend_name}*\t‚úÖ\n–°—É–º–º–∞ _{sum_spend} {currency}_ –∑–∞ _{day} {month}_\n\n"
            else:
                data += f"*{spend_name}*\t‚≠ï\n–°—É–º–º–∞ _{sum_spend} {currency}_ –∑–∞ _{day} {month}_\n\n"
    except Exception as e:
        data = f"*–°–æ–±—ã—Ç–∏—è*\n\n‚úÖ \- —É—á—Ç–µ–Ω–æ\n‚≠ï \- –æ–∂–∏–¥–∞–µ—Ç —É—á—ë—Ç–∞\n\n*–°–æ–±—ã—Ç–∏—è —Ç—Ä–∞—Ç*\n\n*–û—à–∏–±–∫–∞*\n\n"
        logging.error(f"{_get_event_spend_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return data


async def _get_event_income_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–±—ã—Ç–∏–π –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—é–¥–∂–µ—Ç–æ–º.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–±—ã—Ç–∏–π –¥–æ—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        event_income = await db_functions.return_all_events_income(user_id)
        data = "*–°–æ–±—ã—Ç–∏—è –¥–æ—Ö–æ–¥–æ–≤*\n\n"
        month = messages.months_events[int(datetime.datetime.now().month)]
        if len(event_income) == 0:
            data += "*–ü–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\.*\n\n"
            return data
        for income in event_income:
            sum_spend = str(event_income[income]['value_of_income']).replace('.', '\.')
            day = event_income[income]["day_of_income"]
            today = event_income[income]["last_indexed"]
            check = today
            if today is not None:
                today = datetime.datetime.strptime(today, "%Y-%m-%d").day
                if datetime.datetime.strptime(check, "%Y-%m-%d").month < datetime.date.today().month\
                        or datetime.datetime.strptime(check, "%Y-%m-%d").year < datetime.date.today().year:
                    today = None
            if today is not None and day <= today:
                data += f"*{income}*\t‚úÖ\n–°—É–º–º–∞ _{sum_spend} {currency}_ –∑–∞ _{day} {month}_\n\n"
            else:
                data += f"*{income}*\t‚≠ï\n–°—É–º–º–∞ _{sum_spend} {currency}_ –∑–∞ _{day} {month}_\n\n"
    except Exception as e:
        data = f"*–°–æ–±—ã—Ç–∏—è –¥–æ—Ö–æ–¥–æ–≤*\n\n*–û—à–∏–±–∫–∞*\n\n"
        logging.error(f"{_get_event_income_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return data


async def get_budget_of_user(user_id: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—é–¥–∂–µ—Ç–æ–º.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :return: –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—é–¥–∂–µ—Ç–æ–º.
    """
    await db_functions.count_remained(user_id)
    currency = await db_functions.get_user_currency(user_id)
    string = f"{await _get_day_string()}\n\n" \
             f"{await _get_remained_on_day_string(user_id, currency)}\n\n" \
             f"{await _get_limit_string(user_id, currency)}\n\n" \
             f"{await _get_goal_string(user_id, currency)}\n\n" \
             f"{await _get_income_string(user_id, currency)}\n" \
             f"{await _get_spend_string(user_id, currency)}\n\n" \
             f"{await _get_remainer_string(user_id, currency)}\n\n" \
             f"{await _get_event_spend_string(user_id, currency)}" \
             f"{await _get_event_income_string(user_id, currency)}\n"
    if len(string) > 3900:
        string = f"{await _get_day_string()}\n\n" \
                 f"{await _get_remained_on_day_string(user_id, currency)}\n\n" \
                 f"{await _get_limit_string(user_id, currency)}\n\n" \
                 f"{await _get_goal_string(user_id, currency)}\n\n" \
                 f"{await _get_income_string(user_id, currency)}\n" \
                 f"{await _get_spend_string(user_id, currency)}\n\n" \
                 f"{await _get_remainer_string(user_id, currency)}\n\n"
    return string


async def _get_limit_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–∏–º–∏—Ç–∞.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.
    """
    try:
        is_limit = await db_functions.check_limit(user_id)
        if is_limit:
            is_limit = "‚úÖ —Å–æ–±–ª—é–¥—ë–Ω"
        elif is_limit is None:
            is_limit = "‚ùî –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return f"üí∞ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ç:\n{is_limit}"
        else:
            is_limit = "‚ùå –ø—Ä–µ–≤—ã—à–µ–Ω"
        limit = str(await db_functions.get_limit(user_id)).replace('.', '\.')
        all_spends = str(round(await db_functions.return_sum_spend(user_id, None, None, True), 2)).replace('.', '\.')
        string = f"üí∞ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ç:\n{is_limit}\n_\({all_spends} {currency} –∏–∑ {limit} {currency}\)_"
    except Exception as e:
        string = f"üí∞ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ç:\n*–û—à–∏–±–∫–∞*"
        logging.error(f"{_get_limit_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return string


async def _get_goal_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏.
    """
    try:
        is_goal = await db_functions.check_goal(user_id)
        if is_goal:
            is_goal = "‚úÖ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
        elif is_goal is None:
            is_goal = "‚ùî –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            return f"üì© –¶–µ–ª—å –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏:\n{is_goal}"
        else:
            is_goal = "‚ùå –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
        remained = str(await db_functions.get_remained(user_id)).replace('.', '\.')
        goal = str(await db_functions.get_goal(user_id)).replace('.', '\.')
        string = f"üì© –¶–µ–ª—å –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏:\n{is_goal}\n_\({remained} {currency} –∏–∑ {goal} {currency}\)_"
    except Exception as e:
        string = f"üì© –¶–µ–ª—å –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏:\n*–û—à–∏–±–∫–∞*"
        logging.error(f"{_get_goal_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return string


async def _get_remained_on_day_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –Ω–∞ –¥–µ–Ω—å –æ—Å—Ç–∞—Ç–∫–∞.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –¥–µ–Ω—å.
    """
    try:
        days = monthrange(datetime.date.today().year, datetime.date.today().month)[1]
        days_remain = days - len(_get_dates_of_period(None, None, True))
        if days_remain < 0:
            days_remain = 0
        remained = str(round((await db_functions.get_remained(user_id)) / float(days_remain + 1), 2)).replace('.', '\.')
        string = f"üíµ –ù–∞ —Å–µ–≥–æ–¥–Ω—è\: *{remained}* {currency}"
    except Exception as e:
        string = f"üíµ –ù–∞ —Å–µ–≥–æ–¥–Ω—è\: *–û—à–∏–±–∫–∞*"
        logging.error(f"{_get_remained_on_day_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return string


async def _get_income_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞.
    """
    try:
        all_incomes = str(round(await db_functions.return_sum_income(user_id, None, None, True), 2)).replace('.', '\.')
        string = f"üìà –î–æ—Ö–æ–¥—ã\: *{all_incomes}* {currency}"
    except Exception as e:
        string = f"üìà –î–æ—Ö–æ–¥—ã\: *–û—à–∏–±–∫–∞*"
        logging.error(f"{_get_income_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return string


async def _get_spend_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã.
    """
    try:
        all_spends = str(round(await db_functions.return_sum_spend(user_id, None, None, True), 2)).replace('.', '\.')
        string = f"üìâ –¢—Ä–∞—Ç—ã\: *{all_spends}* {currency}"
    except Exception as e:
        string = f"üìâ –¢—Ä–∞—Ç—ã\: *–û—à–∏–±–∫–∞*"
        logging.error(f"{_get_spend_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return string


async def _get_remainer_string(user_id: str, currency: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.
    :param currency: –í–∞–ª—é—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :return: –°—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.
    """
    try:
        all_spends = str(round(await db_functions.get_remained(user_id), 2)).replace('.', '\.')
        string = f"üí∞ –û—Å—Ç–∞—Ç–æ–∫\: *{all_spends}* {currency}"
    except Exception as e:
        string = f"üí∞ –û—Å—Ç–∞—Ç–æ–∫\: *–û—à–∏–±–∫–∞*"
        logging.error(f"{_get_remainer_string.__name__}: {e}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}.")
    return string
